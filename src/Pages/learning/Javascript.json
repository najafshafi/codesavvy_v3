 [
      {
        "title": "Introduction to JavaScript",
        "content": "JavaScript is a versatile and essential programming language for web development. Initially designed to add interactivity to web pages, JavaScript has evolved into a robust language used for both front-end and server-side programming. As a client-side language, JavaScript enables developers to manipulate HTML and CSS dynamically, handle events triggered by user actions (e.g., clicks, scrolls), and interact with browser APIs for tasks such as form validation and data fetching. JavaScript's capabilities extend beyond the browser with frameworks and libraries like React, Angular, and Vue.js, which facilitate building complex web applications. On the server-side, platforms like Node.js allow developers to use JavaScript for backend development, enabling full-stack JavaScript applications. JavaScript syntax is similar to other programming languages like Java and C, making it accessible to developers from various backgrounds. Its versatility, performance, and expansive ecosystem continue to make JavaScript a cornerstone of modern web development.",
        "example_code": "console.log('Hello, world!');"
      },
      {
        "title": "JavaScript Syntax",
        "content": "JavaScript syntax includes rules for writing code, such as statements, expressions, operators, and more. It is case-sensitive and uses semicolons to terminate statements.",
        "example_code": "let x = 5;\nlet y = 10;\nlet sum = x + y;\nconsole.log(sum);"
      },
      {
        "title": "Variables and Data Types",
        "content": "Variables store data values, and data types define the kind of data a variable can hold. JavaScript supports various data types such as numbers, strings, booleans, arrays, and objects.",
        "example_code": "let age = 25;\nlet name = 'John';\nlet isStudent = true;\nlet hobbies = ['reading', 'gaming'];\nlet person = { name: 'Jane', age: 30 };"
      },
      {
        "title": "Operators",
        "content": "Operators perform operations on variables and values. JavaScript includes arithmetic, assignment, comparison, logical, and bitwise operators.",
        "example_code": "let a = 10;\nlet b = 20;\nlet sum = a + b;\nlet isEqual = (a === b);\nlet isGreater = (a > b);"
      },
      {
        "title": "Conditional Statements",
        "content": "Conditional statements allow you to perform different actions based on different conditions. Common conditional statements in JavaScript are if, else if, and else.",
        "example_code": "let age = 18;\nif (age >= 18) {\n  console.log('You are an adult.');\n} else {\n  console.log('You are a minor.');\n}"
      },
      {
        "title": "Loops",
        "content": "Loops execute a block of code repeatedly as long as a specified condition is true. Common loops in JavaScript are for, while, and do...while.",
        "example_code": "for (let i = 0; i < 5; i++) {\n  console.log(i);\n}"
      },
      {
        "title": "Functions",
        "content": "Functions are blocks of code designed to perform a particular task. They are executed when called and can accept parameters and return a value.",
        "example_code": "function greet(name) {\n  return 'Hello, ' + name;\n}\nconsole.log(greet('Alice'));"
      },
      {
        "title": "Arrow Functions",
        "content": "Arrow functions provide a shorter syntax for writing functions in JavaScript. They are always anonymous and do not have their own 'this' value.",
        "example_code": "const greet = (name) => 'Hello, ' + name;\nconsole.log(greet('Alice'));"
      },
      {
        "title": "Objects",
        "content": "Objects are collections of key-value pairs, where keys are strings (or symbols) and values can be any data type. They are used to store structured data.",
        "example_code": "let person = {\n  name: 'John',\n  age: 30,\n  greet: function() {\n    console.log('Hello, ' + this.name);\n  }\n};\nperson.greet();"
      },
      {
        "title": "Arrays",
        "content": "Arrays are used to store multiple values in a single variable. They are list-like objects and come with numerous methods to perform common operations.",
        "example_code": "let fruits = ['apple', 'banana', 'cherry'];\nconsole.log(fruits[0]);"
      },
      {
        "title": "Array Methods",
        "content": "Array methods allow you to perform various operations on arrays, such as adding, removing, or finding elements. Examples include push, pop, shift, unshift, and more.",
        "example_code": "let numbers = [1, 2, 3, 4, 5];\nnumbers.push(6);\nconsole.log(numbers);"
      },
      {
        "title": "String Methods",
        "content": "String methods provide various functionalities to manipulate strings. Examples include length, toUpperCase, toLowerCase, substring, and more.",
        "example_code": "let text = 'Hello, World!';\nconsole.log(text.toUpperCase());"
      },
      {
        "title": "Template Literals",
        "content": "Template literals allow embedded expressions and multi-line strings. They are enclosed by backticks (`) and can contain placeholders indicated by ${expression}.",
        "example_code": "let name = 'John';\nlet message = `Hello, ${name}!`;\nconsole.log(message);"
      },
      {
        "title": "Destructuring Assignment",
        "content": "Destructuring assignment allows you to unpack values from arrays or properties from objects into distinct variables.",
        "example_code": "let person = { name: 'John', age: 30 };\nlet { name, age } = person;\nconsole.log(name, age);"
      },
      {
        "title": "Spread Operator",
        "content": "The spread operator (...) allows an iterable such as an array or string to be expanded in places where zero or more arguments or elements are expected.",
        "example_code": "let arr1 = [1, 2, 3];\nlet arr2 = [...arr1, 4, 5, 6];\nconsole.log(arr2);"
      },
      {
        "title": "Rest Parameter",
        "content": "The rest parameter (...) allows you to represent an indefinite number of arguments as an array in a function definition.",
        "example_code": "function sum(...numbers) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\nconsole.log(sum(1, 2, 3));"
      },
      {
        "title": "Classes",
        "content": "Classes in JavaScript provide a way to create objects and define their behavior using methods. They are templates for creating objects.",
        "example_code": "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  greet() {\n    console.log('Hello, ' + this.name);\n  }\n}\nlet person = new Person('John', 30);\nperson.greet();"
      },
      {
        "title": "Promises",
        "content": "Promises represent the eventual completion (or failure) of an asynchronous operation and its resulting value. They provide a way to handle asynchronous operations more effectively.",
        "example_code": "let promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Operation successful');\n  } else {\n    reject('Operation failed');\n  }\n});\npromise.then(message => {\n  console.log(message);\n}).catch(error => {\n  console.log(error);\n});"
      },
      {
        "title": "Async/Await",
        "content": "Async/await is syntactic sugar for working with promises in a more readable and synchronous-like manner. It allows you to write asynchronous code that looks like synchronous code.",
        "example_code": "async function fetchData() {\n  try {\n    let response = await fetch('https://api.example.com/data');\n    let data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\nfetchData();"
      },
      {
        "title": "Modules",
        "content": "JavaScript modules allow you to break your code into separate files and import them when needed. They help in organizing and maintaining large codebases.",
        "example_code": "// module.js\nexport function greet(name) {\n  return `Hello, ${name}`;\n}\n\n// main.js\nimport { greet } from './module.js';\nconsole.log(greet('Alice'));"
      },
      {
        "title": "DOM Manipulation",
        "content": "The Document Object Model (DOM) is a programming interface for web documents. JavaScript can be used to manipulate the DOM, enabling dynamic content and interactive web pages.",
        "example_code": "let element = document.getElementById('myElement');\nelement.textContent = 'Hello, world!';"
      },
      {
        "title": "Event Handling",
        "content": "Event handling allows you to capture and respond to user interactions such as clicks, key presses, and mouse movements. Event listeners are used to handle events.",
        "example_code": "let button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n  alert('Button clicked!');\n});"
      }
    ]
