[
    {
        "title": "Python Overview",
        "content": "Python is a versatile and powerful programming language known for its simplicity and readability. It is widely used in web development, data science, artificial intelligence, scientific computing, and more. Python supports multiple programming paradigms, including object-oriented, imperative, and functional programming. Its extensive standard library and active community make it a popular choice for beginners and professionals alike.",
        "code_example": ""
    },
    {
        "title": "Setting up Python",
        "content": "To start using Python, download and install the latest version from the official Python website. You can use the Python interpreter or an Integrated Development Environment (IDE) like PyCharm, VS Code, or Jupyter Notebook.",
        "code_example": "# Check if Python is installed\npython --version\n\n# Run a Python script\npython script.py\n\n# Example of a simple Python script\nprint('Hello, Python!')"
    },
    {
        "title": "Variables and Data Types",
        "content": "In Python, variables are used to store data values. Python is dynamically typed, meaning you don't need to declare the data type explicitly. Common data types include integers, floats, strings, lists, tuples, and dictionaries.",
        "code_example": "# Examples of variables and data types\nx = 10             # Integer\ny = 3.14           # Float\nname = 'Alice'     # String\nis_active = True   # Boolean\nfruits = ['apple', 'banana', 'cherry']  # List\n\nprint(x, y, name, is_active, fruits)"
    },
    {
        "title": "Control Flow in Python",
        "content": "Python provides control flow statements like if-else, for, and while loops for decision-making and iteration.",
        "code_example": "# Example of control flow statements\nage = 18\n\nif age >= 18:\n    print('You are an adult.')\nelse:\n    print('You are a minor.')\n\n# For loop\nfor i in range(5):\n    print(i)\n\n# While loop\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1"
    },
    {
        "title": "Functions in Python",
        "content": "Functions in Python are reusable blocks of code that perform specific tasks. They are defined using the `def` keyword and can accept parameters and return values.",
        "code_example": "# Example of a Python function\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('Alice'))"
    },
    {
        "title": "Classes and Objects",
        "content": "Python supports object-oriented programming (OOP) with classes and objects. A class is a blueprint for creating objects, and objects are instances of a class.",
        "code_example": "# Example of a Python class and object\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def introduce(self):\n        return f'My name is {self.name} and I am {self.age} years old.'\n\nperson = Person('Alice', 25)\nprint(person.introduce())"
    },
    {
        "title": "Modules and Packages",
        "content": "Modules are Python files containing reusable code, while packages are directories containing multiple modules. The `import` statement is used to include modules or packages in your program.",
        "code_example": "# Example of importing and using a module\nimport math\n\nprint(math.sqrt(16))  # Outputs 4.0"
    },
    {
        "title": "File Handling in Python",
        "content": "Python provides built-in functions for file handling, including reading, writing, and appending to files. Files can be opened in different modes like read ('r'), write ('w'), and append ('a').",
        "code_example": "# Example of file handling\nwith open('example.txt', 'w') as file:\n    file.write('Hello, File Handling!')\n\nwith open('example.txt', 'r') as file:\n    content = file.read()\n    print(content)"
    },
    {
        "title": "Error Handling in Python",
        "content": "Python uses try-except blocks for error handling, allowing you to gracefully manage exceptions without crashing the program.",
        "code_example": "# Example of error handling\ntry:\n    x = int(input('Enter a number: '))\n    print(10 / x)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero.')\nexcept ValueError:\n    print('Invalid input. Please enter a number.')"
    }
]
