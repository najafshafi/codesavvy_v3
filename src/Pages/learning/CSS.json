[
    {
      "title": "Introduction to CSS",
      "content": "CSS (Cascading Style Sheets) is a fundamental technology used to define the presentation and layout of web pages. It works hand-in-hand with HTML (HyperText Markup Language) and JavaScript to create visually appealing and interactive web experiences. CSS allows developers to specify styles for each HTML element and dictate how elements should appear on different devices and screen sizes. CSS rules consist of selectors that target HTML elements and declarations that define how those elements should be styled. These declarations include properties (e.g., color, font-size, margin) and their corresponding values (e.g., blue, 16px, 20px). CSS offers powerful features such as cascading, inheritance, and specificity, which enable developers to efficiently manage and apply styles across large-scale projects. Modern CSS also includes advanced techniques like Flexbox and Grid for creating flexible and responsive layouts.",
      "code_example": ""
    },
    {
      "title": "CSS Syntax",
      "content": "CSS syntax consists of selectors and declaration blocks. Selectors target HTML elements, and declaration blocks contain one or more property-value pairs. Styles can be applied inline, internally, or externally.",
      "code_example": "/* Inline CSS */\n<h1 style=\"color: blue;\">Hello World</h1>\n\n/* Internal CSS */\n<style>\nh1 {\n  color: blue;\n}\n</style>\n\n/* External CSS */\n<link rel=\"stylesheet\" href=\"styles.css\">"
    },
    {
      "title": "CSS Selectors",
      "content": "CSS selectors are patterns used to select HTML elements for styling. They include element selectors, class selectors, ID selectors, attribute selectors, pseudo-classes, and pseudo-elements.",
      "code_example": "/* Element selector */\nh1 {\n  color: blue;\n}\n\n/* Class selector */\n.highlight {\n  background-color: yellow;\n}\n\n/* ID selector */\n#main-title {\n  font-size: 24px;\n}"
    },
    {
      "title": "CSS Colors",
      "content": "CSS colors can be specified using predefined color names, RGB values, HEX values, HSL values, RGBA values, and HSLA values.",
      "code_example": "body { background-color: lightblue; } h1 { color: #00ff00; } p { color: rgb(0, 0, 255); }"
    },
    {
      "title": "CSS Backgrounds",
      "content": "CSS background properties are used to define the background effects of an element. Background properties include background-color, background-image, background-repeat, background-attachment, and background-position.",
      "code_example": "body { background-color: #f0f0f0; background-image: url('bg.jpg'); background-repeat: no-repeat; background-position: center center; }"
    },
    {
      "title": "CSS Borders",
      "content": "CSS border properties allow you to specify the style, width, and color of an element's border.",
      "code_example": "div { border: 1px solid black; }"
    },
    {
      "title": "CSS Margins",
      "content": "CSS margin properties are used to create space around elements, outside of any defined borders. Margin properties include margin-top, margin-right, margin-bottom, margin-left, and margin (shorthand).",
      "code_example": "p { margin: 20px; }"
    },
    {
      "title": "CSS Padding",
      "content": "CSS padding properties are used to generate space around an element's content, inside of any defined borders. Padding properties include padding-top, padding-right, padding-bottom, padding-left, and padding (shorthand).",
      "code_example": "div { padding: 10px; }"
    },
    {
      "title": "CSS Box Model",
      "content": "The CSS box model represents the structure of a web page's elements. It consists of margins, borders, padding, and the actual content area.",
      "code_example": "div { width: 300px; padding: 25px; border: 25px solid navy; margin: 25px; }"
    },
    {
      "title": "CSS Display",
      "content": "The display property specifies the display behavior (the type of rendering box) of an element. Common values include block, inline, inline-block, and none.",
      "code_example": "div { display: block; } span { display: inline; } img { display: inline-block; }"
    },
    {
      "title": "CSS Position",
      "content": "The position property specifies the type of positioning method used for an element (static, relative, absolute, fixed, or sticky).",
      "code_example": "div { position: relative; left: 10px; top: 20px; }"
    },
    {
      "title": "CSS Layouts",
      "content": "CSS offers several layout models including Flexbox and Grid. Flexbox is one-dimensional, ideal for arranging items in a row or column. Grid is two-dimensional, perfect for creating complex layouts.",
      "code_example": "/* Flexbox */\n.container {\n  display: flex;\n  justify-content: space-between;\n}\n\n/* Grid */\n.grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-gap: 10px;\n}"
    },
    {
      "title": "CSS Typography",
      "content": "CSS typography involves styling text elements such as fonts, sizes, weights, line heights, and spacing. It enhances readability and visual appeal across different devices.",
      "code_example": "/* Font properties */\nbody {\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n/* Text color */\np {\n  color: #333;\n}\n\n/* Text alignment */\n.text-center {\n  text-align: center;\n}"
    },
    {
      "title": "CSS Animations and Transitions",
      "content": "CSS animations and transitions add movement and interactivity to web elements. Animations define keyframes and timing functions, while transitions smoothly change element properties over time.",
      "code_example": "@keyframes slide {\n  0% { transform: translateX(0); }\n  100% { transform: translateX(100px); }\n}\n\n.element {\n  animation: slide 1s ease-in-out infinite;\n}"
    },
    {
      "title": "CSS Best Practices",
      "content": "Best practices help maintainable and scalable CSS code. They include using consistent naming conventions (BEM, SMACSS), avoiding excessive specificity, leveraging preprocessors (Sass, Less), and optimizing performance.",
      "code_example": ""
    },
    {
      "title": "CSS Frameworks",
      "content": "CSS frameworks like Bootstrap and TailwindCSS provide pre-designed components and stylesheets. They streamline development, ensure responsiveness, and maintain consistency across web projects.",
      "code_example": ""
    },
    {
      "title": "Responsive Web Design (RWD)",
      "content": "RWD ensures web pages adapt seamlessly to different screen sizes and devices. CSS media queries, flexible grids, and fluid images are key techniques for creating responsive layouts.",
      "code_example": "@media screen and (max-width: 768px) {\n  .container {\n    width: 100%;\n    padding: 10px;\n  }\n}"
    },
    {
      "title": "CSS Preprocessors",
      "content": "CSS preprocessors like Sass and Less extend CSS with variables, nesting, mixins, and functions. They improve code organization, reduce repetition, and enhance maintainability.",
      "code_example": "/* Variables */\n$primary-color: #3498db;\n\nbody {\n  color: $primary-color;\n}\n\n/* Mixins */\n@mixin border-radius($radius) {\n  border-radius: $radius;\n}\n\n.element {\n  @include border-radius(5px);\n}"
    },
    {
      "title": "CSS Grid Layout",
      "content": "CSS Grid Layout is a two-dimensional layout system for the web. It enables precise control over rows and columns, making it easier to create complex web layouts.",
      "code_example": "/* Grid container */\n.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-gap: 10px;\n}\n\n/* Grid items */\n.item {\n  background-color: #f0f0f0;\n  padding: 10px;\n}"
    },
    {
      "title": "CSS Flexbox Layout",
      "content": "CSS Flexbox is a one-dimensional layout model. It simplifies the alignment and distribution of elements within a container, offering more control over spacing and responsiveness.",
      "code_example": "/* Flex container */\n.container {\n  display: flex;\n  justify-content: space-between;\n}\n\n/* Flex items */\n.item {\n  flex: 1;\n}"
    },
    {
      "title": "CSS Variables",
      "content": "CSS variables (Custom Properties) allow you to store and reuse values throughout your CSS files. They provide flexibility and maintainability by centralizing values in one place.",
      "code_example": ":root {\n  --primary-color: #3498db;\n}\n\nbody {\n  color: var(--primary-color);\n}"
    },
    {
      "title": "CSS Transitions",
      "content": "CSS transitions smoothly animate CSS properties when they change values. They provide a simple way to create animations without using JavaScript.",
      "code_example": ".element {\n  transition: transform 0.3s ease-in-out;\n}\n\n.element:hover {\n  transform: scale(1.1);\n}"
    },
    {
      "title": "Basic Selectors",
      "content": "Selectors are used to target the HTML elements that you want to style.",
      "code_example": "p { color: red; }"
    },
    {
      "title": "Class Selectors",
      "content": "Class selectors allow you to style elements with a specific class attribute.",
      "code_example": ".myClass { font-size: 20px; }"
    },
    {
      "title": "ID Selectors",
      "content": "ID selectors are used to style a single element with a specific ID attribute.",
      "code_example": "#myId { background-color: yellow; }"
    },
    {
      "title": "Grouping Selectors",
      "content": "You can group selectors to apply the same styles to multiple elements.",
      "code_example": "h1, h2, h3 { color: blue; }"
    },
    {
      "title": "Descendant Selectors",
      "content": "Descendant selectors are used to style elements that are nested within other elements.",
      "code_example": "div p { margin: 10px; }"
    },
    {
      "title": "Child Selectors",
      "content": "Child selectors target immediate children of a specified element.",
      "code_example": "ul > li { list-style-type: none; }"
    },
    {
      "title": "Adjacent Sibling Selectors",
      "content": "Adjacent sibling selectors target an element that is immediately preceded by a specified element.",
      "code_example": "h1 + p { font-weight: bold; }"
    },
    {
      "title": "General Sibling Selectors",
      "content": "General sibling selectors target all elements that are siblings of a specified element.",
      "code_example": "h1 ~ p { color: green; }"
    },
    {
      "title": "Attribute Selectors",
      "content": "Attribute selectors allow you to style elements based on their attributes.",
      "code_example": "a[target='_blank'] { text-decoration: none; }"
    },
    {
      "title": "Pseudo-classes",
      "content": "Pseudo-classes are used to define the special state of an element.",
      "code_example": "a:hover { color: orange; }"
    },
    {
      "title": "Pseudo-elements",
      "content": "Pseudo-elements allow you to style specific parts of an element.",
      "code_example": "p::first-line { font-weight: bold; }"
    },
    {
      "title": "Universal Selector",
      "content": "The universal selector targets all elements on the page.",
      "code_example": "* { margin: 0; padding: 0; }"
    },
    {
      "title": "Type Selector",
      "content": "The type selector targets all elements of a specified type.",
      "code_example": "h1 { text-align: center; }"
    },
    {
      "title": "Attribute Selector with Value",
      "content": "Attribute selectors can target elements with specific attribute values.",
      "code_example": "input[type='text'] { border: 1px solid black; }"
    },
    {
      "title": "Class Selector with Multiple Classes",
      "content": "You can use multiple class selectors to style elements with more than one class.",
      "code_example": ".btn.primary { background-color: blue; color: white; }"
    },
    {
      "title": "First-child Pseudo-class",
      "content": "The first-child pseudo-class targets the first child of a specified element.",
      "code_example": "li:first-child { font-weight: bold; }"
    },
    {
      "title": "Last-child Pseudo-class",
      "content": "The last-child pseudo-class targets the last child of a specified element.",
      "code_example": "li:last-child { font-weight: bold; }"
    },
    {
      "title": "Nth-child Pseudo-class",
      "content": "The nth-child pseudo-class targets the nth child of a specified element.",
      "code_example": "li:nth-child(2) { color: red; }"
    },
    {
      "title": "Nth-of-type Pseudo-class",
      "content": "The nth-of-type pseudo-class targets the nth child of a specified type of element.",
      "code_example": "p:nth-of-type(2) { font-size: 18px; }"
    },
    {
      "title": "Only-child Pseudo-class",
      "content": "The only-child pseudo-class targets an element that is the only child of its parent.",
      "code_example": "div:only-child { border: 2px solid red; }"
    },
    {
      "title": "Only-of-type Pseudo-class",
      "content": "The only-of-type pseudo-class targets an element that is the only child of its type.",
      "code_example": "p:only-of-type { color: blue; }"
    },
    {
      "title": "First-of-type Pseudo-class",
      "content": "The first-of-type pseudo-class targets the first child of a specified type.",
      "code_example": "h1:first-of-type { margin-top: 0; }"
    },
    {
      "title": "Last-of-type Pseudo-class",
      "content": "The last-of-type pseudo-class targets the last child of a specified type.",
      "code_example": "h1:last-of-type { margin-bottom: 0; }"
    },
    {
      "title": "Not Pseudo-class",
      "content": "The not pseudo-class excludes elements that match a selector.",
      "code_example": "p:not(.highlight) { color: gray; }"
    },
    {
      "title": "Hover Pseudo-class",
      "content": "The hover pseudo-class applies styles when the user hovers over an element.",
      "code_example": "button:hover { background-color: blue; }"
    },
    {
      "title": "Active Pseudo-class",
      "content": "The active pseudo-class applies styles when an element is activated.",
      "code_example": "a:active { color: red; }"
    },
    {
      "title": "Focus Pseudo-class",
      "content": "The focus pseudo-class applies styles when an element has focus.",
      "code_example": "input:focus { outline: none; }"
    },
    {
      "title": "Before Pseudo-element",
      "content": "The before pseudo-element inserts content before an element.",
      "code_example": "h1::before { content: '*'; }"
    },
    {
      "title": "After Pseudo-element",
      "content": "The after pseudo-element inserts content after an element.",
      "code_example": "h1::after { content: '*'; }"
    },
    {
      "title": "First-letter Pseudo-element",
      "content": "The first-letter pseudo-element styles the first letter of an element.",
      "code_example": "p::first-letter { font-size: 2em; }"
    },
    {
      "title": "First-line Pseudo-element",
      "content": "The first-line pseudo-element styles the first line of an element.",
      "code_example": "p::first-line { font-weight: bold; }"
    },
    {
      "title": "Text Color",
      "content": "The color property sets the color of the text.",
      "code_example": "p { color: blue; }"
    },
    {
      "title": "Background Color",
      "content": "The background-color property sets the background color of an element.",
      "code_example": "div { background-color: yellow; }"
    },
    {
      "title": "Font Family",
      "content": "The font-family property specifies the font for an element.",
      "code_example": "body { font-family: Arial, sans-serif; }"
    },
    {
      "title": "Font Size",
      "content": "The font-size property sets the size of the text.",
      "code_example": "h1 { font-size: 36px; }"
    },
    {
      "title": "Font Style",
      "content": "The font-style property specifies the style of the text.",
      "code_example": "em { font-style: italic; }"
    },
    {
      "title": "Font Weight",
      "content": "The font-weight property specifies the weight (or boldness) of the text.",
      "code_example": "strong { font-weight: bold; }"
    },
    {
      "title": "Text Alignment",
      "content": "The text-align property specifies the horizontal alignment of text.",
      "code_example": "h1 { text-align: center; }"
    }
  ]