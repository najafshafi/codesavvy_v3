[
    {
      "question": "What is XML and how is it used?",
      "solution": "XML (eXtensible Markup Language) is a markup language used to store and transport data. It is used to define custom tags for representing data in a structured format, such as for configuration files, data interchange between systems, or storing structured documents."
    },
    {
      "question": "How do you create a basic XML document?",
      "solution": "A basic XML document includes a declaration, a root element, and child elements. Example:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<book>\n    <title>Learn XML</title>\n    <author>John Doe</author>\n</book>\n```"
    },
    {
      "question": "What is the purpose of the `<?xml ... ?>` declaration?",
      "solution": "The `<?xml ... ?>` declaration specifies the XML version and the encoding used in the document. Example:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n```"
    },
    {
      "question": "What are elements in XML?",
      "solution": "Elements in XML are the building blocks of an XML document. An element consists of a start tag, content, and an end tag. Example:\n\n```xml\n<name>John</name>\n```"
    },
    {
      "question": "How do you represent attributes in XML?",
      "solution": "Attributes are used within the start tag of an element to provide additional information. Example:\n\n```xml\n<person name=\"John\" age=\"30\" />\n```"
    },
    {
      "question": "How do you create a self-closing tag in XML?",
      "solution": "A self-closing tag in XML is created by placing a `/` at the end of the element tag. Example:\n\n```xml\n<person name=\"John\" age=\"30\" />\n```"
    },
    {
      "question": "What is the difference between an element and an attribute in XML?",
      "solution": "An element is used to define data, while an attribute provides additional metadata about that data. Example of an element:\n\n```xml\n<person>John</person>\n```\nAnd an attribute example:\n\n```xml\n<person name=\"John\" />\n```"
    },
    {
      "question": "How can you add comments in XML?",
      "solution": "Comments in XML are added using the `<!-- -->` syntax. Example:\n\n```xml\n<!-- This is a comment -->\n<book>XML Basics</book>\n```"
    },
    {
      "question": "How do you represent text data inside an XML element?",
      "solution": "Text data is placed directly inside the opening and closing tags of an element. Example:\n\n```xml\n<greeting>Hello, world!</greeting>\n```"
    },
    {
      "question": "How can you format XML data for readability?",
      "solution": "XML data can be formatted with indentation (whitespace or tabs) to make it more readable. Example:\n\n```xml\n<book>\n    <title>Learn XML</title>\n    <author>John Doe</author>\n</book>\n```"
    },
    {
      "question": "How can you define a root element in an XML document?",
      "solution": "The root element is the top-most element in an XML document, and all other elements must be nested inside it. Example:\n\n```xml\n<bookstore>\n    <book>\n        <title>XML Guide</title>\n    </book>\n</bookstore>\n```"
    },
    {
      "question": "How do you declare namespaces in XML?",
      "solution": "Namespaces in XML are declared using the `xmlns` attribute. Example:\n\n```xml\n<book xmlns=\"http://www.example.com/books\">\n    <title>XML Basics</title>\n</book>\n```"
    },
    {
      "question": "What is the purpose of the `<!DOCTYPE>` declaration in XML?",
      "solution": "The `<!DOCTYPE>` declaration defines the document type and allows for validation based on a Document Type Definition (DTD). Example:\n\n```xml\n<!DOCTYPE note SYSTEM \"note.dtd\">\n<note>\n    <to>Tove</to>\n</note>\n```"
    },
    {
      "question": "How do you use CDATA sections in XML?",
      "solution": "CDATA sections allow you to include text that should not be treated as XML. Example:\n\n```xml\n<description><![CDATA[This is <em>important</em>]]></description>\n```"
    },
    {
      "question": "How do you validate an XML document using a DTD?",
      "solution": "You can include a DTD reference in your XML document using the `DOCTYPE` declaration or link to an external DTD file. Example:\n\n```xml\n<!DOCTYPE note SYSTEM \"note.dtd\">\n<note>\n    <to>Tove</to>\n</note>\n```"
    },
    {
      "question": "What is XML Schema (XSD) and how is it different from DTD?",
      "solution": "XML Schema (XSD) is a more powerful and flexible alternative to DTD for validating the structure and content of XML documents. XSD allows you to define data types for elements and attributes, whereas DTD only defines the structure."
    },
    {
      "question": "How do you refer to an external XML Schema in an XML document?",
      "solution": "You can reference an external XML Schema using the `xsi:schemaLocation` attribute. Example:\n\n```xml\n<book xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n      xsi:schemaLocation=\"http://www.example.com/books books.xsd\">\n    <title>XML Basics</title>\n</book>\n```"
    },
    {
      "question": "How do you create an XML element with nested elements?",
      "solution": "XML elements can have child elements, which can also have their own children. Example:\n\n```xml\n<store>\n    <product>\n        <name>Book</name>\n        <price>29.99</price>\n    </product>\n</store>\n```"
    },
    {
      "question": "How do you define a reference to an entity in XML?",
      "solution": "Entities in XML are defined using the `<!ENTITY>` declaration. Example:\n\n```xml\n<!DOCTYPE book [\n    <!ENTITY author \"John Doe\">\n]>\n<book>\n    <author>&author;</author>\n</book>\n```"
    },
    {
      "question": "What are the rules for creating valid XML?",
      "solution": "Valid XML documents must have a single root element, elements must be properly nested, tags must be case-sensitive, and attributes must be enclosed in quotes."
    },
    {
      "question": "What is the role of the XML parser?",
      "solution": "An XML parser reads XML data and verifies if it is well-formed. It also makes the data accessible for applications by converting it into a usable data structure, like a DOM or SAX tree."
    },
    {
      "question": "How can you retrieve XML data from a URL in Python?",
      "solution": "In Python, you can use libraries like `requests` or `urllib` to fetch XML data from a URL. Example using `requests`:\n\n```python\nimport requests\nresponse = requests.get('http://example.com/data.xml')\nxml_data = response.text\n```"
    },
    {
      "question": "How do you parse an XML file in Python using `xml.etree.ElementTree`?",
      "solution": "You can parse an XML file using `ElementTree` by loading the file and accessing its elements. Example:\n\n```python\nimport xml.etree.ElementTree as ET\ntree = ET.parse('data.xml')\nroot = tree.getroot()\nprint(root.tag)\n```"
    },
    {
      "question": "How do you find elements by tag name using `xml.etree.ElementTree` in Python?",
      "solution": "You can use the `findall()` method to find elements by tag name. Example:\n\n```python\nfor elem in root.findall('book'):\n    print(elem.find('title').text)\n```"
    },
    {
      "question": "How can you modify an XML document in Python?",
      "solution": "You can modify an XML document by changing element text or attributes. Example:\n\n```python\nroot.find('book').set('id', '2')\nroot.find('title').text = 'New Title'\n```"
    },
    {
      "question": "How do you write an updated XML document in Python?",
      "solution": "After modifying the XML, you can write it back to a file using `write()`. Example:\n\n```python\ntree.write('updated_data.xml')\n```"
    },
    {
      "question": "How do you handle namespaces in XML using Python?",
      "solution": "To handle namespaces in XML, you can specify the namespace in the tag search. Example:\n\n```python\nns = {'book': 'http://www.example.com/books'}\nfor elem in root.findall('book:title', ns):\n    print(elem.text)\n```"
    }
  ]
  