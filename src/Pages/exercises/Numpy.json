[
    {
      "question": "What is NumPy in Python?",
      "solution": "NumPy is a powerful library for numerical computing in Python. It provides support for multidimensional arrays and matrices, along with a collection of mathematical functions to operate on these arrays."
    },
    {
      "question": "How do you import NumPy in Python?",
      "solution": "You can import NumPy using the following code:\n```python\nimport numpy as np\n```"
    },
    {
      "question": "How do you create a NumPy array from a list?",
      "solution": "You can create a NumPy array from a Python list using the `np.array()` function:\n```python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr)\n```"
    },
    {
      "question": "How do you create a NumPy array of zeros?",
      "solution": "To create a NumPy array of zeros, use the `np.zeros()` function:\n```python\nimport numpy as np\narr = np.zeros((3, 3))\nprint(arr)\n```"
    },
    {
      "question": "How do you create a NumPy array of ones?",
      "solution": "You can create a NumPy array of ones using the `np.ones()` function:\n```python\nimport numpy as np\narr = np.ones((2, 3))\nprint(arr)\n```"
    },
    {
      "question": "What is the difference between a list and a NumPy array?",
      "solution": "NumPy arrays are more efficient for large data sets and offer a large collection of mathematical operations. Lists in Python are more general-purpose and slower for numerical operations compared to NumPy arrays."
    },
    {
      "question": "How do you create an array with random values in NumPy?",
      "solution": "You can create an array with random values using `np.random.rand()`:\n```python\nimport numpy as np\narr = np.random.rand(3, 3)\nprint(arr)\n```"
    },
    {
      "question": "How do you access an element in a NumPy array?",
      "solution": "You can access an element in a NumPy array using indexing, similar to Python lists:\n```python\narr = np.array([10, 20, 30])\nprint(arr[1])  # Output: 20\n```"
    },
    {
      "question": "How do you change an element in a NumPy array?",
      "solution": "You can change an element in a NumPy array by indexing the array and assigning a new value:\n```python\narr = np.array([1, 2, 3])\narr[1] = 10\nprint(arr)  # Output: [ 1 10  3]\n```"
    },
    {
      "question": "What is slicing in NumPy?",
      "solution": "Slicing in NumPy is a technique used to access a portion of an array. For example, to access a subarray:\n```python\narr = np.array([1, 2, 3, 4, 5])\nsubarray = arr[1:4]  # Output: [2 3 4]\n```"
    },
    {
      "question": "How do you find the shape of a NumPy array?",
      "solution": "To find the shape of a NumPy array, use the `shape` attribute:\n```python\narr = np.array([[1, 2], [3, 4]])\nprint(arr.shape)  # Output: (2, 2)\n```"
    },
    {
      "question": "How do you reshape a NumPy array?",
      "solution": "You can reshape a NumPy array using the `reshape()` function:\n```python\narr = np.array([1, 2, 3, 4, 5, 6])\nreshaped_arr = arr.reshape((2, 3))\nprint(reshaped_arr)\n```"
    },
    {
      "question": "What is broadcasting in NumPy?",
      "solution": "Broadcasting in NumPy allows operations on arrays of different shapes, provided that they are compatible. For example:\n```python\narr1 = np.array([1, 2, 3])\narr2 = np.array([1])\nresult = arr1 + arr2  # Broadcasting happens here\nprint(result)  # Output: [2 3 4]\n```"
    },
    {
      "question": "How do you perform element-wise addition in NumPy?",
      "solution": "Element-wise addition can be done using the `+` operator:\n```python\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nresult = arr1 + arr2\nprint(result)  # Output: [5 7 9]\n```"
    },
    {
      "question": "How do you compute the mean of a NumPy array?",
      "solution": "You can compute the mean of a NumPy array using the `np.mean()` function:\n```python\narr = np.array([1, 2, 3, 4, 5])\nmean = np.mean(arr)\nprint(mean)  # Output: 3.0\n```"
    },
    {
      "question": "How do you compute the standard deviation of a NumPy array?",
      "solution": "You can compute the standard deviation of a NumPy array using the `np.std()` function:\n```python\narr = np.array([1, 2, 3, 4, 5])\nstd_dev = np.std(arr)\nprint(std_dev)  # Output: 1.4142135623730951\n```"
    },
    {
      "question": "How do you find the sum of elements in a NumPy array?",
      "solution": "You can find the sum of elements in a NumPy array using the `np.sum()` function:\n```python\narr = np.array([1, 2, 3, 4])\nsum = np.sum(arr)\nprint(sum)  # Output: 10\n```"
    },
    {
      "question": "How do you find the maximum value in a NumPy array?",
      "solution": "You can find the maximum value in a NumPy array using the `np.max()` function:\n```python\narr = np.array([1, 2, 3, 4])\nmax_value = np.max(arr)\nprint(max_value)  # Output: 4\n```"
    },
    {
      "question": "How do you perform matrix multiplication in NumPy?",
      "solution": "You can perform matrix multiplication using the `@` operator or the `np.dot()` function:\n```python\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nresult = A @ B\nprint(result)\n```"
    },
    {
      "question": "How do you find the inverse of a matrix in NumPy?",
      "solution": "You can find the inverse of a matrix using the `np.linalg.inv()` function:\n```python\nA = np.array([[1, 2], [3, 4]])\ninv_A = np.linalg.inv(A)\nprint(inv_A)\n```"
    },
    {
      "question": "What is the purpose of `np.linspace()` in NumPy?",
      "solution": "`np.linspace()` creates an array of evenly spaced numbers over a specified range:\n```python\narr = np.linspace(0, 10, 5)\nprint(arr)  # Output: [ 0.   2.5  5.   7.5 10. ]\n```"
    },
    {
      "question": "How do you create an identity matrix in NumPy?",
      "solution": "You can create an identity matrix using `np.eye()`:\n```python\narr = np.eye(3)\nprint(arr)  # Output: [[1. 0. 0.]\n            [0. 1. 0.]\n            [0. 0. 1.]]\n```"
    },
    {
      "question": "How do you check if an element is present in a NumPy array?",
      "solution": "You can use the `in` operator to check if an element is in a NumPy array:\n```python\narr = np.array([1, 2, 3, 4])\nresult = 3 in arr\nprint(result)  # Output: True\n```"
    },
    {
      "question": "How do you concatenate two NumPy arrays?",
      "solution": "You can concatenate two NumPy arrays using `np.concatenate()`:\n```python\narr1 = np.array([1, 2])\narr2 = np.array([3, 4])\nresult = np.concatenate((arr1, arr2))\nprint(result)  # Output: [1 2 3 4]\n```"
    },
    {
      "question": "How do you split a NumPy array?",
      "solution": "You can split a NumPy array using `np.split()`:\n```python\narr = np.array([1, 2, 3, 4, 5, 6])\nsplit_arr = np.split(arr, 2)\nprint(split_arr)  # Output: [array([1, 2, 3]), array([4, 5, 6])]\n```"
    },
    {
      "question": "How do you transpose a NumPy array?",
      "solution": "You can transpose a NumPy array using the `.T` attribute:\n```python\narr = np.array([[1, 2], [3, 4]])\ntransposed_arr = arr.T\nprint(transposed_arr)  # Output: [[1 3]\n                [2 4]]\n```"
    },
    {
      "question": "What does the `np.unique()` function do?",
      "solution": "`np.unique()` returns the sorted unique elements of an array:\n```python\narr = np.array([1, 2, 2, 3, 3, 3])\nunique_elements = np.unique(arr)\nprint(unique_elements)  # Output: [1 2 3]\n```"
    },
    {
      "question": "How do you perform element-wise multiplication in NumPy?",
      "solution": "Element-wise multiplication can be done using the `*` operator:\n```python\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\nresult = arr1 * arr2\nprint(result)  # Output: [ 4 10 18]\n```"
    },
    {
      "question": "How do you check the data type of a NumPy array?",
      "solution": "You can check the data type of a NumPy array using the `.dtype` attribute:\n```python\narr = np.array([1, 2, 3])\nprint(arr.dtype)  # Output: int64\n```"
    },
    {
      "question": "What is the use of `np.where()` in NumPy?",
      "solution": "`np.where()` returns the indices of elements in an array that satisfy a given condition:\n```python\narr = np.array([1, 2, 3, 4])\nindices = np.where(arr > 2)\nprint(indices)  # Output: (array([2, 3]),)\n```"
    }
  ]
  